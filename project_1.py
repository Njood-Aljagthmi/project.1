# -*- coding: utf-8 -*-
"""Project 1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1xl4iqqV4DmofcWcnygUfkcFX2aXCj6BV

1. Data Importing and Cleaning:
"""

import pandas as pd
file_path= "/content/nearest-earth-objects(1910-2024).csv"
df = pd.read_csv(file_path)
df.info(), df.head()

# Checking for missing values
missing_values = df.isnull().sum()

# Dropping rows with missing values
df_cleaned = df.dropna()

# Verifying missing values are removed
missing_values_after = df_cleaned.isnull().sum()

# Displaying the missing values before and after cleaning
missing_values, missing_values_after

"""2. Exploratory Data Analysis (EDA):"""

import matplotlib.pyplot as plt
import seaborn as sns

plt.style.use('ggplot')


plt.figure(figsize=(8, 5))
sns.histplot(df_cleaned['absolute_magnitude'], bins=50, kde=True)
plt.xlabel('Absolute Magnitude')
plt.ylabel('Count')
plt.title('Distribution of Absolute Magnitude')
plt.show()


plt.figure(figsize=(8, 5))
sns.scatterplot(x=df_cleaned['absolute_magnitude'], y=df_cleaned['estimated_diameter_max'], alpha=0.5)
plt.xlabel('Absolute Magnitude')
plt.ylabel('Estimated Diameter Max (km)')
plt.title('Absolute Magnitude vs. Estimated Diameter')
plt.show()


plt.figure(figsize=(8, 5))
sns.boxplot(x=df_cleaned['relative_velocity'])
plt.xlabel('Relative Velocity (km/h)')
plt.title('Boxplot of Relative Velocity')
plt.show()


plt.figure(figsize=(8, 5))
sns.heatmap(df_cleaned.corr(), annot=True, cmap='coolwarm', fmt=".2f", linewidths=0.5)
plt.title('Correlation Heatmap of Numerical Features')
plt.show()

"""Data Preprocessing:"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.utils import resample

file_path= "/content/nearest-earth-objects(1910-2024).csv"
df = pd.read_csv(file_path)


# Dropping rows with missing values
df_cleaned = df.dropna()

# Selecting relevant features
features = ['absolute_magnitude', 'estimated_diameter_min', 'estimated_diameter_max',
            'relative_velocity', 'miss_distance']
X = df_cleaned[features]
y = df_cleaned['is_hazardous']

df_majority = df_cleaned[df_cleaned.is_hazardous == False]
df_minority = df_cleaned[df_cleaned.is_hazardous == True]

df_majority_downsampled = resample(df_majority,
                                   replace=False,
                                   n_samples=len(df_minority),
                                   random_state=42)

df_balanced = pd.concat([df_majority_downsampled, df_minority])


X_balanced = df_balanced[features]
y_balanced = df_balanced['is_hazardous']

X_train_bal, X_test_bal, y_train_bal, y_test_bal = train_test_split(X_balanced, y_balanced, test_size=0.2, random_state=42, stratify=y_balanced)


scaler_bal = StandardScaler()
X_train_bal_scaled = scaler_bal.fit_transform(X_train_bal)
X_test_bal_scaled = scaler_bal.transform(X_test_bal)


class_distribution_balanced = y_train_bal.value_counts()

class_distribution_balanced

"""4. Model Training and Evaluation:

"""

from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, accuracy_score, roc_auc_score, roc_curve
import matplotlib.pyplot as plt

y_train_bal = y_train_bal.astype(int)
y_test_bal = y_test_bal.astype(int)

model = RandomForestClassifier(class_weight='balanced', random_state=42, n_estimators=100)
model.fit(X_train_bal_scaled, y_train_bal)


y_pred = model.predict(X_test_bal_scaled)
y_pred_proba = model.predict_proba(X_test_bal_scaled)[:, 1]


accuracy = accuracy_score(y_test_bal, y_pred)
classification_rep = classification_report(y_test_bal, y_pred)
roc_auc = roc_auc_score(y_test_bal, y_pred_proba)


fpr, tpr, _ = roc_curve(y_test_bal, y_pred_proba)

plt.figure(figsize=(8, 5))
plt.plot(fpr, tpr, label=f'AUC = {roc_auc:.2f}')
plt.plot([0, 1], [0, 1], linestyle='--', color='gray')
plt.xlabel('False Positive Rate')
plt.ylabel('True Positive Rate')
plt.title('ROC Curve')
plt.legend()
plt.show()



accuracy, classification_rep, roc_auc